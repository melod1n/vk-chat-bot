import {Command} from "../model/chat-command";
import {TAG_ERROR, vk} from "../index";
import {StorageManager} from "../database/storage-manager";
import {Utils} from "../util/utils";

// eslint-disable-next-line @typescript-eslint/no-var-requires
const dependencies = require("./../../package.json").dependencies;

export class About extends Command {
    regexp = /^\/about/i;
    title = "/about";
    description = "information about this bot";

    async execute(context) {
        const depsKeys = Object.keys(dependencies);
        const depsValues = [];
        depsKeys.forEach(key => {
            depsValues.push(dependencies[key]);
        });

        let aboutText = `VK API v. ${vk.api.options.apiVersion}`;

        aboutText += "\n\n–û—Ç–≤–µ—Ç—ã: \n";
        aboutText += `* –¢–µ—Å—Ç: ${StorageManager.answers.testAnswers.length} –æ—Ç–≤–µ—Ç–æ–≤\n`;
        aboutText += `* –ò–Ω–≤–∞–π—Ç: ${StorageManager.answers.inviteAnswers.length} –æ—Ç–≤–µ—Ç–æ–≤\n`;
        aboutText += `* –ö–∏–∫: ${StorageManager.answers.kickAnswers.length} –æ—Ç–≤–µ—Ç–æ–≤\n`;
        aboutText += `* –ö—Ç–æ: ${StorageManager.answers.whoAnswers.length} –æ—Ç–≤–µ—Ç–æ–≤\n`;
        aboutText += `* –ß—Ç–æ –ª—É—á—à–µ: ${StorageManager.answers.betterAnswers.length} –æ—Ç–≤–µ—Ç–æ–≤\n`;

        aboutText += "\n";

        aboutText += "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: \n";

        for (let i = 0; i < depsKeys.length; i++) {
            aboutText += `* ${depsKeys[i]} ${depsValues[i]}\n`;
        }

        aboutText += "\n\n–°–æ–∑–¥–∞—Ç–µ–ª—å: @melod1n";

        try {
            await vk.api.messages.send({
                peer_id: context.senderId,
                message: aboutText,
                random_id: 0,
                disable_mentions: true
            }).then(async () => {
                if (!context.isChat) return;
                await context.reply("–û—Ç–ø—Ä–∞–≤–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –õ–° üòé");
            });
        } catch (e) {
            console.error(`${TAG_ERROR}: about.ts: ${Utils.getExceptionText(e)}`);
            if (e.code == 901) {
                await context.reply("–†–∞–∑—Ä–µ—à–∏—Ç–µ –º–Ω–µ –ø–∏—Å–∞—Ç—å –í–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è ü•∫");
            } else {
                await context.reply("–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –õ–° ‚òπ");
            }
        }
    }
}